

VBO
    直接在GPU上开辟一个存储区来存储数据，我们平时的那种是在CPU上存储的，然后绘制的时候每次都会copy到GPU上去
    我们平时用的FloatBuffer等不是VBO，只是在CPU上的一段而已
    http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/
    // First, generate as many buffers as we need.
    // This will give us the OpenGL handles for these buffers.
    final int buffers[] = new int[3];
    GLES20.glGenBuffers(3, buffers, 0);
    // Bind to the buffer. Future commands will affect this buffer specifically.
    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[0]);
    // Transfer data from client memory to the buffer.
    // We can release the client memory after this call.
    GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER, cubePositionsBuffer.capacity() * BYTES_PER_FLOAT,
        cubePositionsBuffer, GLES20.GL_STATIC_DRAW);
    // IMPORTANT: Unbind from the buffer when we're done with it.
    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, 0);
    。。。
    // Pass in the position information
    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, mCubePositionsBufferIdx);
    GLES20.glEnableVertexAttribArray(mPositionHandle);
    mGlEs20.glVertexAttribPointer(mPositionHandle, POSITION_DATA_SIZE, GLES20.GL_FLOAT, false, 0, 0);



FBO
    离屏渲染Frame Buffer Object
    http://blog.csdn.net/junzia/article/details/53861519

    http://opengles2learning.blogspot.com/2014/02/render-to-texture-rtt.html 写得非常好
    Initialize FBO
    int[] temp = new int[1];
    //generate fbo id
    GLES20.glGenFramebuffers(1, temp, 0);
    fboId = temp[0];
    //generate texture
    GLES20.glGenTextures(1, temp, 0);
    fboTex = temp[0];
    //generate render buffer
    GLES20.glGenRenderbuffers(1, temp, 0);
    renderBufferId = temp[0];
    //Bind Frame buffer
    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fboId);
    //Bind texture
    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fboTex);
    //Define texture parameters
    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, fboWidth, fboHeight, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);
    GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
    GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
    GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
    GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
    //Bind render buffer and define buffer dimension
    GLES20.glBindRenderbuffer(GLES20.GL_RENDERBUFFER, renderBufferId);
    GLES20.glRenderbufferStorage(GLES20.GL_RENDERBUFFER, GLES20.GL_DEPTH_COMPONENT16, fboWidth, fboHeight);
    //Attach texture FBO color attachment
    GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, fboTex, 0);
    //Attach render buffer to depth attachment
    GLES20.glFramebufferRenderbuffer(GLES20.GL_FRAMEBUFFER, GLES20.GL_DEPTH_ATTACHMENT, GLES20.GL_RENDERBUFFER, renderBufferId);
    //we are done, reset
    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);
    GLES20.glBindRenderbuffer(GLES20.GL_RENDERBUFFER, 0);
    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);

    Render to FBO
    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fboId);
    GLES20.glViewport(0, 0, fboWidth, fboHeight);
            ******Rendering Code*******
    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, 0);

    USE
    //since I'm multi-texturing, bind fboId to texture1
    GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, fboId);
    GLES20.glUniform1i(iTexLoc1, 1);